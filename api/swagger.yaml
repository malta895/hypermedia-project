---
swagger: "2.0"
info:
  description: "This is a simple bookstore server with a book inventory, users and\
    \ a shopping cart."
  version: "1.0.0"
  title: "BookHub"
  contact:
    email: "info@bookhub.it"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api"
tags:
- name: "book"
  description: "Available book"
- name: "cart"
  description: "Access to the cart"
- name: "user"
  description: "Operations about user"
- name: "event"
  description: "Operations on event"
- name: "publisher"
  description: "Operations on publisher"
- name: "order"
  description: "Operations about an order"
- name: "author"
  description: "Operations about an author"
- name: "review"
  description: "Operations about books reviews"
- name: "address"
  description: "Operations about an address"
schemes:
- "https"
- "http"
paths:
  /books:
    get:
      tags:
      - "book"
      summary: "Books filter"
      description: "Filter books by specified criteria"
      operationId: "booksGET"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "Filter by name\n"
        required: false
        type: "string"
      - name: "not_in_stock"
        in: "query"
        description: "If true returns also books not in stock. Default is false."
        required: false
        type: "boolean"
      - name: "publishers"
        in: "query"
        description: "Filter by publishers' ID\n"
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "authors"
        in: "query"
        description: "Filter by author"
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "ISBN"
        in: "query"
        description: "Filter by ISBN"
        required: false
        type: "string"
      - name: "min_price"
        in: "query"
        description: "Filter by price higher than value"
        required: false
        type: "number"
      - name: "max_price"
        in: "query"
        description: "Filter by price lower than value"
        required: false
        type: "number"
      - name: "genre"
        in: "query"
        description: "Filter by genres"
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "themes"
        in: "query"
        description: "Filter by themes"
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "best_seller"
        in: "query"
        description: "If true returns bestsellers only"
        required: false
        type: "boolean"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "No books found"
      x-swagger-router-controller: "Book"
  /books/{bookId}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              book_id:
                type: "integer"
                format: "int64"
              isbn:
                type: "string"
              title:
                type: "string"
              price:
                type: "number"
                format: "double"
              price_currency:
                type: "string"
                description: "The currency of the price, in a string of length 3"
              picture:
                type: "string"
              abstract:
                type: "string"
              interview:
                type: "string"
              status:
                type: "string"
              publisher:
                type: "string"
              average_rating:
                type: "number"
                format: "double"
              authors:
                type: "array"
                description: "Array containing the full names of the authors of the\
                  \ book"
                items:
                  type: "string"
              genres:
                type: "array"
                description: "Array containing the genres of the book"
                items:
                  type: "string"
              themes:
                type: "array"
                description: "Array containing the themes of the book"
                items:
                  type: "string"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Book"
  /books/{bookId}/related:
    get:
      tags:
      - "book"
      summary: "Books similar to a specific book"
      description: "Collection of books similar to specified book"
      operationId: "relatedBooksGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the book similar to the ones returned"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Bad Input!"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "No books found matching the given criteria!"
      x-swagger-router-controller: "Book"
  /books/{bookId}/events:
    get:
      tags:
      - "event"
      - "book"
      summary: "Get events of a book"
      description: "Given a book Id, returns all the events in which was presented"
      operationId: "bookEventsGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Id of the book to get the events"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operations"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Invalid request"
        404:
          description: "No events found!"
      x-swagger-router-controller: "Event"
  /books/{bookId}/reviews:
    get:
      tags:
      - "review"
      - "book"
      summary: "Get reviews of a book"
      description: "Given a book Id, returns all the reviews"
      operationId: "bookReviewsGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Id of the book to get the reviews"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Invalid request"
        404:
          description: "No reviews found!"
      x-swagger-router-controller: "Review"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Login"
      description: "Login with a form. Username can also be the user's email."
      operationId: "userLoginPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "Username of the user. Can also be the email."
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "Successful login"
        401:
          description: "Wrong username/password"
      x-swagger-router-controller: "User"
  /user/logout:
    post:
      tags:
      - "user"
      summary: "Logout"
      description: "Login with a form"
      operationId: "userLogoutPOST"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful logout"
        400:
          description: "Invalid request"
      x-swagger-router-controller: "User"
  /user/register:
    post:
      tags:
      - "user"
      summary: "Register"
      description: "Register into the store"
      operationId: "userRegisterPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
        format: "password"
      - name: "email"
        in: "formData"
        required: true
        type: "string"
      - name: "firstName"
        in: "formData"
        required: true
        type: "string"
      - name: "surname"
        in: "formData"
        required: true
        type: "string"
      - name: "birthDate"
        in: "formData"
        required: true
        type: "string"
        format: "date"
      responses:
        200:
          description: "Successful registration"
        400:
          description: "Invalid Request!"
        409:
          description: "Duplicate values for username and/or email."
      x-swagger-router-controller: "User"
  /user/usernameAvailable/{username}:
    get:
      tags:
      - "user"
      summary: "Check username availability"
      description: "Given an username, returns true if it is not used by someone else"
      operationId: "userUsernameAvailableGET"
      parameters:
      - name: "username"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "The username is available"
        409:
          description: "The username is not available"
      x-swagger-router-controller: "User"
  /user/emailAvailable/{email}:
    get:
      tags:
      - "user"
      summary: "Check email availability"
      description: "Given an email address, returns true if it is not used by someone\
        \ else"
      operationId: "userEmailAvailableGET"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
        format: "email"
      responses:
        200:
          description: "The email is not already registered"
        400:
          description: "Not valid email string"
        409:
          description: "An user was previously registered with this email."
      x-swagger-router-controller: "User"
  /user/delete:
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "Delete an user's account"
      operationId: "userDeletePOST"
      parameters: []
      responses:
        200:
          description: "Successful operation!"
        400:
          description: "Invalid request"
        403:
          description: "Unauthorized"
      x-swagger-router-controller: "User"
  /user/add/address:
    post:
      tags:
      - "address"
      - "user"
      summary: "Add address to the current user"
      description: "Add an address to the user"
      operationId: "userAddAddressPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "firstName"
        in: "formData"
        required: false
        type: "string"
      - name: "lastName"
        in: "formData"
        required: false
        type: "string"
      - name: "addressStreetLine1"
        in: "formData"
        required: true
        type: "string"
      - name: "addressStreetLine2"
        in: "formData"
        required: false
        type: "string"
      - name: "city"
        in: "formData"
        required: true
        type: "string"
      - name: "zip_code"
        in: "formData"
        required: true
        type: "string"
      - name: "province"
        in: "formData"
        required: true
        type: "string"
      - name: "country"
        in: "formData"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful add"
        400:
          description: "Some parameters are missing or the given ones have bad syntax"
        403:
          description: "Not authorized!"
      x-swagger-router-controller: "Address"
  /user/update/address:
    put:
      tags:
      - "address"
      - "user"
      summary: "Modify address of the current user"
      description: "Modify address of the current user.  If no parameters are specified\
        \ throws a 400 error"
      operationId: "userModifyAddressPUT"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "firstName"
        in: "formData"
        required: false
        type: "string"
      - name: "lastName"
        in: "formData"
        required: false
        type: "string"
      - name: "addressStreetLine1"
        in: "formData"
        required: false
        type: "string"
      - name: "addressStreetLine2"
        in: "formData"
        required: false
        type: "string"
      - name: "city"
        in: "formData"
        required: false
        type: "string"
      - name: "zip_code"
        in: "formData"
        required: false
        type: "string"
      - name: "province"
        in: "formData"
        required: false
        type: "string"
      - name: "country"
        in: "formData"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful update!"
        400:
          description: "Missing parameters or the given ones have bad syntax"
        403:
          description: "Not authorized!"
      x-swagger-router-controller: "Address"
  /user/update/password:
    put:
      tags:
      - "user"
      summary: "Update user's password"
      description: "Put request to modify user's password"
      operationId: "userModifyPasswordPUT"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "old_password"
        in: "formData"
        required: true
        type: "string"
        format: "password"
      - name: "new_password"
        in: "formData"
        required: true
        type: "string"
        format: "password"
      - name: "confirm_new_password"
        in: "formData"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Passwords do not coincide!"
        401:
          description: "Old password is wrong!"
        403:
          description: "You must login to perform this operation"
      x-swagger-router-controller: "User"
  /user/update:
    put:
      tags:
      - "user"
      summary: "Update user's data"
      description: "Put request to modify some of the user's data.  One can modify\
        \ single values, so nothing is required.  If no parameter is set a 400 error\
        \ is thrown."
      operationId: "userModifyPUT"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        required: false
        type: "string"
      - name: "email"
        in: "formData"
        required: false
        type: "string"
      - name: "firstName"
        in: "formData"
        required: false
        type: "string"
      - name: "surname"
        in: "formData"
        required: false
        type: "string"
      - name: "birthDate"
        in: "formData"
        required: false
        type: "string"
        format: "date"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Missing parameters or the given ones have bad syntax"
        403:
          description: "Unathorized"
      x-swagger-router-controller: "User"
  /me:
    get:
      tags:
      - "user"
      summary: "Get current user's data"
      description: "Get current logged in user data"
      operationId: "userGetDetailsGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        403:
          description: "Not Authorized!"
      x-swagger-router-controller: "User"
  /user/{userId}/reviews:
    get:
      tags:
      - "review"
      - "user"
      summary: "Get reviews from a user"
      description: "Given a user Id, returns all the reviews posted by that user"
      operationId: "userReviewsGET"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user to get the reviews"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Invalid request"
        404:
          description: "No reviews found!"
      x-swagger-router-controller: "Review"
  /cart:
    get:
      tags:
      - "cart"
      summary: "View the content of the cart"
      operationId: "cartGET"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: "Invalid request!"
        403:
          description: "Unauthorized"
      x-swagger-router-controller: "Cart"
  /cart/add/book/{bookId}:
    put:
      tags:
      - "cart"
      summary: "Add/remove items to the cart"
      description: "Adds the given book by id to the cart. Optional quantity, defaults\
        \ to 1"
      operationId: "cartUpdatePUT"
      parameters:
      - name: "bookId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "quantity"
        in: "query"
        description: "Number of copies to add to the cart. Default is 1."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Bad request"
        404:
          description: "Book not available in inventory"
      x-swagger-router-controller: "Cart"
  /cart/remove/book/{bookId}:
    delete:
      tags:
      - "cart"
      summary: "Remove items from the cart"
      description: "Remove the given book by id to the cart. Optional quantity, defaults\
        \ to 1"
      operationId: "cartRemoveDELETE"
      parameters:
      - name: "bookId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "quantity"
        in: "query"
        description: "Number of copies to remove from the cart. Default is 1"
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Bad request"
        404:
          description: "Book not in the cart"
      x-swagger-router-controller: "Cart"
  /cart/empty:
    delete:
      tags:
      - "cart"
      summary: "Empty the cart"
      description: "Empty the cart completely"
      operationId: "cartEmptyDELETE"
      parameters: []
      responses:
        200:
          description: "Successful operation"
        403:
          description: "You must login to perform this operation"
        404:
          description: "Cart was already empty"
      x-swagger-router-controller: "Cart"
  /authors:
    get:
      tags:
      - "author"
      summary: "Get the list of authors"
      operationId: "authorsGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        404:
          description: "Author not found!"
      x-swagger-router-controller: "Author"
  /authors/{authorId}:
    get:
      tags:
      - "author"
      summary: "Get an author by ID"
      operationId: "authorIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Author"
        404:
          description: "Author not found!"
      x-swagger-router-controller: "Author"
  /publishers:
    get:
      tags:
      - "publisher"
      summary: "Get all publishers"
      operationId: "publishersGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Publisher"
        404:
          description: "Not found!"
      x-swagger-router-controller: "Publisher"
  /publishers/{publisherId}:
    get:
      tags:
      - "publisher"
      summary: "Get a publisher by Id"
      operationId: "publisherIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "publisherId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        404:
          description: "Publisher not found!"
      x-swagger-router-controller: "Publisher"
  /events:
    get:
      tags:
      - "event"
      summary: "Get events filtered"
      operationId: "eventGET"
      produces:
      - "application/json"
      parameters:
      - name: "nameLike"
        in: "query"
        required: false
        type: "string"
      - name: "dateMin"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
      - name: "dateMax"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operations"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        404:
          description: "No events found!"
      x-swagger-router-controller: "Event"
  /events/{eventId}:
    get:
      tags:
      - "event"
      summary: "Get an event in which a book is presented"
      operationId: "eventIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event not found!"
      x-swagger-router-controller: "Event"
  /orders:
    get:
      tags:
      - "order"
      summary: "Current user's orders"
      description: "Collection of orders placed by the current user"
      operationId: "ordersGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Order"
        403:
          description: "Not authorized!"
      x-swagger-router-controller: "Order"
  /orders/{orderId}:
    get:
      tags:
      - "order"
      summary: "Get an order by id"
      operationId: "orderDetailsGET"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "Order not found!"
      x-swagger-router-controller: "Order"
  /orders/create:
    post:
      tags:
      - "order"
      summary: "Place a new order"
      description: "Place a new order from the cart"
      operationId: "orderPlacePOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "firstName"
        in: "formData"
        required: false
        type: "string"
      - name: "lastName"
        in: "formData"
        required: false
        type: "string"
      - name: "addressStreetLine1"
        in: "formData"
        required: true
        type: "string"
      - name: "addressStreetLine2"
        in: "formData"
        required: false
        type: "string"
      - name: "city"
        in: "formData"
        required: true
        type: "string"
      - name: "zip_code"
        in: "formData"
        required: true
        type: "string"
      - name: "province"
        in: "formData"
        required: true
        type: "string"
      - name: "country"
        in: "formData"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful placement"
        400:
          description: "Missing parameters or the given ones have bad syntax"
        403:
          description: "Unauthorized"
      x-swagger-router-controller: "Order"
  /orders/{orderId}/address:
    get:
      tags:
      - "order"
      summary: "Get shipment address of a order"
      description: "Given an order id, returns the shipment address set to that order,\
        \ if user is authorized to see it"
      operationId: "orderAddressGET"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "The id of the order. Must be associated to the current logged\
          \ in user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Address"
        403:
          description: "Not authorized!"
        404:
          description: "Review not found!"
      x-swagger-router-controller: "Order"
  /reviews/{reviewId}:
    get:
      tags:
      - "review"
      summary: "Get a review by Id"
      operationId: "reviewIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "reviewId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Review"
        404:
          description: "Review not found!"
      x-swagger-router-controller: "Review"
  /books/{bookId}/reviews/add:
    post:
      tags:
      - "review"
      - "user"
      - "book"
      summary: "Add a new review"
      description: "Add a new review to the given book"
      operationId: "bookAddReviewPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "bookId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "rating"
        in: "formData"
        required: true
        type: "integer"
        maximum: 5
        minimum: 1
        format: "int32"
      - name: "title"
        in: "formData"
        required: false
        type: "string"
      - name: "text"
        in: "formData"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Bad input data"
        403:
          description: "You must login to perform this operation!"
        409:
          description: "A review from the current user already exists on the given\
            \ book"
      x-swagger-router-controller: "Review"
definitions:
  User:
    type: "object"
    required:
    - "birth_date"
    - "email"
    - "first_name"
    - "surname"
    - "user_id"
    - "username"
    properties:
      user_id:
        type: "integer"
        format: "int64"
        example: 1
      username:
        type: "string"
        example: "malta895"
      first_name:
        type: "string"
        example: "Mario"
      surname:
        type: "string"
        example: "Rossi"
      email:
        type: "string"
        format: "email"
      birth_date:
        type: "string"
        format: "date"
      address:
        $ref: "#/definitions/Address"
    title: "User"
    description: "A user of the application."
    example:
      address:
        country: "Italy"
        province: "CO"
        city: "Como"
        latitude: 6.02745618307040320615897144307382404804229736328125
        address_id: 1
        last_name: "last_name"
        street_line2: "11"
        street_line1: "Via Valleggio"
        first_name: "first_name"
        zip_code: "22100"
        longitude: 1.46581298050294517310021547018550336360931396484375
      user_id: 1
      surname: "Rossi"
      birth_date: "2000-01-23"
      first_name: "Mario"
      email: "email"
      username: "malta895"
  Cart:
    type: "object"
    required:
    - "books"
    - "total_amount"
    - "user_id"
    properties:
      user_id:
        type: "integer"
        format: "int64"
      total_amount:
        $ref: "#/definitions/Amount"
      books:
        type: "array"
        items:
          $ref: "#/definitions/Cart_books"
    title: "Cart"
    description: "Contains books selected by a user, ready to be ordered"
    example:
      books:
      - quantity: 6
        book:
          picture_path: "pic1.jpg"
          price:
            currency: "EUR"
            value: 11
          isbn: "123456679"
          genre:
            name: "Horror"
            description: "Very scary"
            genre_id: 1
          publisher:
            publisher_id: 1
            hq_location:
              country: "Italy"
              province: "CO"
              city: "Como"
              latitude: 6.02745618307040320615897144307382404804229736328125
              address_id: 1
              last_name: "last_name"
              street_line2: "11"
              street_line1: "Via Valleggio"
              first_name: "first_name"
              zip_code: "22100"
              longitude: 1.46581298050294517310021547018550336360931396484375
            name: "Zanichelli"
            description: "description"
          average_rating: 5.962133916683182377482808078639209270477294921875
          theme:
            name: "name"
            description: "description"
          book_id: 1
          title: "Il deserto dei tartari"
          authors:
          - surname: "Rossi"
            name: "Mario"
            biography: "biography"
            author_id: 0
            picture: "picture"
          - surname: "Rossi"
            name: "Mario"
            biography: "biography"
            author_id: 0
            picture: "picture"
          status: "Available"
      - quantity: 6
        book:
          picture_path: "pic1.jpg"
          price:
            currency: "EUR"
            value: 11
          isbn: "123456679"
          genre:
            name: "Horror"
            description: "Very scary"
            genre_id: 1
          publisher:
            publisher_id: 1
            hq_location:
              country: "Italy"
              province: "CO"
              city: "Como"
              latitude: 6.02745618307040320615897144307382404804229736328125
              address_id: 1
              last_name: "last_name"
              street_line2: "11"
              street_line1: "Via Valleggio"
              first_name: "first_name"
              zip_code: "22100"
              longitude: 1.46581298050294517310021547018550336360931396484375
            name: "Zanichelli"
            description: "description"
          average_rating: 5.962133916683182377482808078639209270477294921875
          theme:
            name: "name"
            description: "description"
          book_id: 1
          title: "Il deserto dei tartari"
          authors:
          - surname: "Rossi"
            name: "Mario"
            biography: "biography"
            author_id: 0
            picture: "picture"
          - surname: "Rossi"
            name: "Mario"
            biography: "biography"
            author_id: 0
            picture: "picture"
          status: "Available"
      user_id: 0
      total_amount:
        currency: "EUR"
        value: 11
  Book:
    type: "object"
    required:
    - "book_id"
    - "price"
    - "publisher"
    - "title"
    properties:
      book_id:
        type: "integer"
        format: "int64"
        example: 1
      isbn:
        type: "string"
        example: "123456679"
      title:
        type: "string"
        example: "Il deserto dei tartari"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/Author"
      price:
        $ref: "#/definitions/Amount"
      picture_path:
        type: "string"
        example: "pic1.jpg"
        description: "Relative path to a picture representing the book\n"
      status:
        type: "string"
        example: "Available"
        description: "Book availability in the inventory"
        enum:
        - "Available"
        - "Out of stock"
      publisher:
        $ref: "#/definitions/Publisher"
      average_rating:
        type: "number"
        format: "double"
        description: "Average rating of the book, calculated from the reviews"
      genre:
        $ref: "#/definitions/Genre"
      theme:
        $ref: "#/definitions/Theme"
    title: "Book"
    description: "A book for sale in the store"
    example:
      picture_path: "pic1.jpg"
      price:
        currency: "EUR"
        value: 11
      isbn: "123456679"
      genre:
        name: "Horror"
        description: "Very scary"
        genre_id: 1
      publisher:
        publisher_id: 1
        hq_location:
          country: "Italy"
          province: "CO"
          city: "Como"
          latitude: 6.02745618307040320615897144307382404804229736328125
          address_id: 1
          last_name: "last_name"
          street_line2: "11"
          street_line1: "Via Valleggio"
          first_name: "first_name"
          zip_code: "22100"
          longitude: 1.46581298050294517310021547018550336360931396484375
        name: "Zanichelli"
        description: "description"
      average_rating: 5.962133916683182377482808078639209270477294921875
      theme:
        name: "name"
        description: "description"
      book_id: 1
      title: "Il deserto dei tartari"
      authors:
      - surname: "Rossi"
        name: "Mario"
        biography: "biography"
        author_id: 0
        picture: "picture"
      - surname: "Rossi"
        name: "Mario"
        biography: "biography"
        author_id: 0
        picture: "picture"
      status: "Available"
  Amount:
    type: "object"
    required:
    - "currency"
    - "value"
    properties:
      value:
        type: "number"
        format: "double"
        minimum: 0.01
        maximum: 1000000000
      currency:
        $ref: "#/definitions/Currency"
    description: "Price of an item"
    example:
      currency: "EUR"
      value: 11
  Currency:
    type: "string"
    pattern: "^[A-Z]{3,3}$"
    description: "Currency international code\n"
    example: "EUR"
  Author:
    type: "object"
    required:
    - "author_id"
    - "name"
    - "surname"
    properties:
      author_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Mario"
        description: "First name of the author\n"
      surname:
        type: "string"
        example: "Rossi"
        description: "Surname of the author\n"
      biography:
        type: "string"
        description: "Short biography of the author\n"
      picture:
        type: "string"
        description: "A portrait of the author\n"
    title: "Author"
    description: "An author that has written or co-written some books in the store"
    example:
      surname: "Rossi"
      name: "Mario"
      biography: "biography"
      author_id: 0
      picture: "picture"
  Address:
    type: "object"
    required:
    - "city"
    - "country"
    - "street_line1"
    - "zip_code"
    properties:
      address_id:
        type: "integer"
        format: "int64"
        example: 1
      first_name:
        type: "string"
        description: "First name on the address"
      last_name:
        type: "string"
        description: "Last name on the address"
      street_line1:
        type: "string"
        example: "Via Valleggio"
      street_line2:
        type: "string"
        example: "11"
      city:
        type: "string"
        example: "Como"
      zip_code:
        type: "string"
        example: "22100"
      province:
        type: "string"
        example: "CO"
      country:
        type: "string"
        example: "Italy"
      latitude:
        type: "number"
        format: "double"
      longitude:
        type: "number"
        format: "double"
    title: "Address"
    description: "A complete address template, usable in many contexts of the web\
      \ app"
    example:
      country: "Italy"
      province: "CO"
      city: "Como"
      latitude: 6.02745618307040320615897144307382404804229736328125
      address_id: 1
      last_name: "last_name"
      street_line2: "11"
      street_line1: "Via Valleggio"
      first_name: "first_name"
      zip_code: "22100"
      longitude: 1.46581298050294517310021547018550336360931396484375
  Event:
    type: "object"
    required:
    - "date"
    - "event_id"
    - "location"
    - "name"
    - "presented_book"
    properties:
      event_id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Unique identifier of the event"
      location:
        $ref: "#/definitions/Address"
      presented_book:
        $ref: "#/definitions/Book"
      name:
        type: "string"
      date:
        type: "string"
        format: "date-time"
    title: "Event"
    description: "An event where some books are presented"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      event_id: 1
      name: "name"
      location:
        country: "Italy"
        province: "CO"
        city: "Como"
        latitude: 6.02745618307040320615897144307382404804229736328125
        address_id: 1
        last_name: "last_name"
        street_line2: "11"
        street_line1: "Via Valleggio"
        first_name: "first_name"
        zip_code: "22100"
        longitude: 1.46581298050294517310021547018550336360931396484375
      presented_book:
        picture_path: "pic1.jpg"
        price:
          currency: "EUR"
          value: 11
        isbn: "123456679"
        genre:
          name: "Horror"
          description: "Very scary"
          genre_id: 1
        publisher:
          publisher_id: 1
          hq_location:
            country: "Italy"
            province: "CO"
            city: "Como"
            latitude: 6.02745618307040320615897144307382404804229736328125
            address_id: 1
            last_name: "last_name"
            street_line2: "11"
            street_line1: "Via Valleggio"
            first_name: "first_name"
            zip_code: "22100"
            longitude: 1.46581298050294517310021547018550336360931396484375
          name: "Zanichelli"
          description: "description"
        average_rating: 5.962133916683182377482808078639209270477294921875
        theme:
          name: "name"
          description: "description"
        book_id: 1
        title: "Il deserto dei tartari"
        authors:
        - surname: "Rossi"
          name: "Mario"
          biography: "biography"
          author_id: 0
          picture: "picture"
        - surname: "Rossi"
          name: "Mario"
          biography: "biography"
          author_id: 0
          picture: "picture"
        status: "Available"
  Publisher:
    type: "object"
    required:
    - "name"
    - "publisher_id"
    properties:
      publisher_id:
        type: "integer"
        format: "int64"
        example: 1
      hq_location:
        $ref: "#/definitions/Address"
      name:
        type: "string"
        example: "Zanichelli"
        description: "Name of the editor/publisher"
      description:
        type: "string"
        description: "Some information on the publisher"
    title: "Publisher"
    description: "Who edits/publishes a book"
    example:
      publisher_id: 1
      hq_location:
        country: "Italy"
        province: "CO"
        city: "Como"
        latitude: 6.02745618307040320615897144307382404804229736328125
        address_id: 1
        last_name: "last_name"
        street_line2: "11"
        street_line1: "Via Valleggio"
        first_name: "first_name"
        zip_code: "22100"
        longitude: 1.46581298050294517310021547018550336360931396484375
      name: "Zanichelli"
      description: "description"
  Genre:
    type: "object"
    required:
    - "genre_id"
    - "name"
    properties:
      genre_id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "Horror"
      description:
        type: "string"
        example: "Very scary"
    title: "Genre"
    description: "The genre of the book"
    example:
      name: "Horror"
      description: "Very scary"
      genre_id: 1
  Theme:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      description:
        type: "string"
    title: "Theme"
    description: "The theme of the book"
    example:
      name: "name"
      description: "description"
  Review:
    type: "object"
    required:
    - "book"
    - "date_published"
    - "rating"
    - "review_id"
    - "user"
    properties:
      review_id:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/Review_user"
      title:
        type: "string"
        description: "Title of the review"
      text:
        type: "string"
        description: "Content of the review"
      rating:
        type: "integer"
        format: "int64"
        description: "Rating of the review, expressed in 1 to 5 stars"
        minimum: 1
        maximum: 5
      book:
        type: "integer"
        format: "int64"
        description: "Id of the reviewed book"
      date_published:
        type: "string"
        format: "date-time"
    title: "Review"
    description: "A review of a book, with rating and optional title and text"
    example:
      review_id: 0
      date_published: "2000-01-23T04:56:07.000+00:00"
      book: 1
      rating: 3
      text: "text"
      title: "title"
      user:
        surname: "surname"
        first_name: "first_name"
        username: "username"
  Order:
    type: "object"
    required:
    - "items"
    - "order_id"
    - "shipment_address"
    - "total_amount"
    properties:
      order_id:
        type: "integer"
        format: "int64"
        description: "Id of the order"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Book"
      total_amount:
        $ref: "#/definitions/Amount"
      shipment_address:
        $ref: "#/definitions/Address"
      order_date:
        type: "string"
        format: "date-time"
    example:
      order_date: "2000-01-23T04:56:07.000+00:00"
      total_amount:
        currency: "EUR"
        value: 11
      shipment_address:
        country: "Italy"
        province: "CO"
        city: "Como"
        latitude: 6.02745618307040320615897144307382404804229736328125
        address_id: 1
        last_name: "last_name"
        street_line2: "11"
        street_line1: "Via Valleggio"
        first_name: "first_name"
        zip_code: "22100"
        longitude: 1.46581298050294517310021547018550336360931396484375
      order_id: 0
      items:
      - picture_path: "pic1.jpg"
        price:
          currency: "EUR"
          value: 11
        isbn: "123456679"
        genre:
          name: "Horror"
          description: "Very scary"
          genre_id: 1
        publisher:
          publisher_id: 1
          hq_location:
            country: "Italy"
            province: "CO"
            city: "Como"
            latitude: 6.02745618307040320615897144307382404804229736328125
            address_id: 1
            last_name: "last_name"
            street_line2: "11"
            street_line1: "Via Valleggio"
            first_name: "first_name"
            zip_code: "22100"
            longitude: 1.46581298050294517310021547018550336360931396484375
          name: "Zanichelli"
          description: "description"
        average_rating: 5.962133916683182377482808078639209270477294921875
        theme:
          name: "name"
          description: "description"
        book_id: 1
        title: "Il deserto dei tartari"
        authors:
        - surname: "Rossi"
          name: "Mario"
          biography: "biography"
          author_id: 0
          picture: "picture"
        - surname: "Rossi"
          name: "Mario"
          biography: "biography"
          author_id: 0
          picture: "picture"
        status: "Available"
      - picture_path: "pic1.jpg"
        price:
          currency: "EUR"
          value: 11
        isbn: "123456679"
        genre:
          name: "Horror"
          description: "Very scary"
          genre_id: 1
        publisher:
          publisher_id: 1
          hq_location:
            country: "Italy"
            province: "CO"
            city: "Como"
            latitude: 6.02745618307040320615897144307382404804229736328125
            address_id: 1
            last_name: "last_name"
            street_line2: "11"
            street_line1: "Via Valleggio"
            first_name: "first_name"
            zip_code: "22100"
            longitude: 1.46581298050294517310021547018550336360931396484375
          name: "Zanichelli"
          description: "description"
        average_rating: 5.962133916683182377482808078639209270477294921875
        theme:
          name: "name"
          description: "description"
        book_id: 1
        title: "Il deserto dei tartari"
        authors:
        - surname: "Rossi"
          name: "Mario"
          biography: "biography"
          author_id: 0
          picture: "picture"
        - surname: "Rossi"
          name: "Mario"
          biography: "biography"
          author_id: 0
          picture: "picture"
        status: "Available"
  inline_response_200:
    properties:
      book_id:
        type: "integer"
        format: "int64"
      isbn:
        type: "string"
      title:
        type: "string"
      price:
        type: "number"
        format: "double"
      price_currency:
        type: "string"
        description: "The currency of the price, in a string of length 3"
      picture:
        type: "string"
      abstract:
        type: "string"
      interview:
        type: "string"
      status:
        type: "string"
      publisher:
        type: "string"
      average_rating:
        type: "number"
        format: "double"
      authors:
        type: "array"
        description: "Array containing the full names of the authors of the book"
        items:
          type: "string"
      genres:
        type: "array"
        description: "Array containing the genres of the book"
        items:
          type: "string"
      themes:
        type: "array"
        description: "Array containing the themes of the book"
        items:
          type: "string"
    example:
      isbn: "isbn"
      average_rating: 1.46581298050294517310021547018550336360931396484375
      book_id: 0
      abstract: "abstract"
      title: "title"
      picture: "picture"
      themes:
      - "themes"
      - "themes"
      price: 6.02745618307040320615897144307382404804229736328125
      genres:
      - "genres"
      - "genres"
      publisher: "publisher"
      interview: "interview"
      price_currency: "price_currency"
      status: "status"
      authors:
      - "authors"
      - "authors"
  inline_response_400:
    properties:
      message:
        type: "string"
  Cart_books:
    properties:
      book:
        $ref: "#/definitions/Book"
      quantity:
        type: "integer"
        format: "int64"
        description: "How many copies of the book the user has selected"
    example:
      quantity: 6
      book:
        picture_path: "pic1.jpg"
        price:
          currency: "EUR"
          value: 11
        isbn: "123456679"
        genre:
          name: "Horror"
          description: "Very scary"
          genre_id: 1
        publisher:
          publisher_id: 1
          hq_location:
            country: "Italy"
            province: "CO"
            city: "Como"
            latitude: 6.02745618307040320615897144307382404804229736328125
            address_id: 1
            last_name: "last_name"
            street_line2: "11"
            street_line1: "Via Valleggio"
            first_name: "first_name"
            zip_code: "22100"
            longitude: 1.46581298050294517310021547018550336360931396484375
          name: "Zanichelli"
          description: "description"
        average_rating: 5.962133916683182377482808078639209270477294921875
        theme:
          name: "name"
          description: "description"
        book_id: 1
        title: "Il deserto dei tartari"
        authors:
        - surname: "Rossi"
          name: "Mario"
          biography: "biography"
          author_id: 0
          picture: "picture"
        - surname: "Rossi"
          name: "Mario"
          biography: "biography"
          author_id: 0
          picture: "picture"
        status: "Available"
  Review_user:
    properties:
      first_name:
        type: "string"
      surname:
        type: "string"
      username:
        type: "string"
    description: "Data of the user that posted"
    example:
      surname: "surname"
      first_name: "first_name"
      username: "username"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"

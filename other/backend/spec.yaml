---
swagger: "2.0"
info:
  description: "This is a simple bookstore server with a book inventory, users and\
    \ a shopping cart."
  version: "1.0.0"
  title: "BookHub"
  contact:
    email: "info@bookhub.it"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

# host: "localhost:8080"
# basePath: "/v2"

basePath: "/api"

tags:
- name: "book"
  description: "Available book"
- name: "cart"
  description: "Access to the cart"
- name: "user"
  description: "Operations about user"
- name: "event"
  description: "Operations on event"
- name: "publisher"
  description: "Operations on publisher"
- name: "order"
  description: "Operations about an order"
- name: "author"
  description: "Operations about an author"
- name: "review"
  description: "Operations about books reviews"
- name: "address"
  description: "Operations about an address"

paths:

  /books:
    get:
      tags:
      - "book"
      summary: "Books filter"
      description: "Filter books by specified criteria"
      operationId: "booksGET"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "Filter by name\n"
        type: "string"
      - name: "not_in_stock"
        in: "query"
        description: "If true returns also books not in stock. Default is false."
        type: "boolean"
      - name: "publishers"
        in: "query"
        description: "Filter by publishers' ID\n"
        type: "array"
        items:
          type: "integer"
          format: "int64"
      - name: "authors"
        in: "query"
        description: "Filter by author"
        type: "array"
        items:
          type: "integer"
          format: "int64"
      - name: "ISBN"
        in: "query"
        description: "Filter by ISBN"
        type: "string"
      - name: "min_price"
        in: "query"
        description: "Filter by price higher than value"
        type: "number"
      - name: "max_price"
        in: "query"
        description: "Filter by price lower than value"
        type: "number"
      - name: "genre"
        in: "query"
        description: "Filter by genres"
        type: "array"
        items:
          type: "integer"
          format: "int64"
      - name: "themes"
        in: "query"
        description: "Filter by themes"
        type: "array"
        items:
          type: "integer"
          format: "int64"
      - name: "bestseller"
        in: "query"
        type: "boolean"
        description: "Show only bestsellers of the month"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "No books found"

  /books/{bookId}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              book_id:
                type: "integer"
                format: "int64"
              isbn:
                type: "string"
              title:
                type: "string"
              price:
                type: "number"
                format: "double"
              price_currency:
                type: "string"
                description: "The currency of the price, in a string of length 3"
              picture:
                type: "string"
              abstract:
                type: "string"
              interview:
                type: "string"
              status:
                type: "string"
              publisher:
                type: "string"
              average_rating:
                type: "number"
                format: "double"
              authors:
                type: "array"
                items:
                  type: "string"
                description: "Array containing the full names of the authors of the book"
              genres:
                type: "array"
                items:
                  type: "string"
                description: "Array containing the genres of the book"
              themes:
                type: "array"
                items:
                  type: "string"
                description: "Array containing the themes of the book"
        404:
          description: "Book not found"

  /books/monthBestseller:
    get:
      tags:
      - "book"
      summary: "Get bestsellers of a month"
      description: "Get a list of bestsellers of a given month"
      operationId: "bestsellerGET"
      produces:
      - "application/json"
      parameters:
      - name: "month_date"
        in: "query"
        type: "string"
        format: "date"
        required: false
        description: "Bestseller in the month of the specified date, \
      \ ordered by the most sold to the less. Defaults to current month"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "No book sold this mont!"

  /books/{bookId}/related:
    get:
      tags:
      - "book"
      summary: "Books similar to a specific book"
      description: "Collection of books similar to specified book"
      operationId: "relatedBooksGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the book similar to the ones returned"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Bad Input!"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "No books found matching the given criteria!"

  /books/{bookId}/events:
    get:
      tags:
      - "event"
      - "book"
      summary: "Get events of a book"
      description: "Given a book Id, returns all the events in which was presented"
      operationId: "bookEventsGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Id of the book to get the events"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operations"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        404:
          description: "No events found!"
        400:
          description: "Invalid request"

  /books/{bookId}/reviews:
    get:
      tags:
      - "review"
      - "book"
      summary: "Get reviews of a book"
      description: "Given a book Id, returns all the reviews"
      operationId: "bookReviewsGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Id of the book to get the reviews"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        404:
          description: "No reviews found!"
        400:
          description: "Invalid request"

  /user/login:
    post:
      tags:
      - "user"
      summary: "Login"
      description: "Login with a form. Username can also be the user's email."
      operationId: "userLoginPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        required: true
        type: "string"
        description: "Username of the user. Can also be the email."
      - name: "password"
        in: "formData"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "Successful login"
        401:
          description: "Wrong username/password"

  /user/logout:
    post:
      tags:
      - "user"
      summary: "Logout"
      description: "Login with a form"
      operationId: "userLogoutPOST"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful logout"
        400:
          description: "Invalid request"


  /user/register:
    post:
      tags:
      - "user"
      summary: "Register"
      description: "Register into the store"
      operationId: "userRegisterPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "username"
          in: "formData"
          type: "string"
          required: true
        - name: "password"
          in: "formData"
          type: "string"
          format: "password"
          required: true
        - name: "email"
          in: "formData"
          type: "string"
          required: true
        - name: "first_name"
          in: "formData"
          type: "string"
          required: true
        - name: "surname"
          in: "formData"
          type: "string"
          required: true
        - name: "birthDate"
          in: "formData"
          type: "string"
          format: "date"
          required: true
      responses:
        200:
          description: "Successful registration"
        400:
          description: "Invalid Request!"
        409:
          description: "Duplicate values for username and/or email."

  /user/usernameAvailable/{username}:
    get:
      tags:
      - "user"
      summary: "Check username availability"
      description: "Given an username, returns true if it is not used by someone else"
      operationId: "userUsernameAvailableGET"
      parameters:
      - name: "username"
        in: "path"
        type: "string"
        required: true
      responses:
        200:
          description: "The username is available"
        409:
          description: "The username is not available"

  /user/emailAvailable/{email}:
    get:
      tags:
      - "user"
      summary: "Check email availability"
      description: "Given an email address, returns true if it is not used by someone else"
      operationId: "userEmailAvailableGET"
      parameters:
      - name: "email"
        in: "path"
        type: "string"
        format: "email"
        required: true
      responses:
        200:
          description: "The email is not already registered"
        409:
          description: "An user was previously registered with this email."
        400:
          description: "Not valid email string"

  /user/delete:
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "Delete an user's account"
      operationId: "userDeletePOST"
      responses:
        200:
          description: "Successful operation!"
        403:
          description: "Unauthorized"
        400:
          description: "Invalid request"

  /user/add/address:
    post:
      tags:
      - "address"
      - "user"
      summary: "Add address to the current user"
      description: "Add an address to the user"
      operationId: "userAddAddressPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "first_name"
          type: "string"
          in: "formData"
        - name: "last_name"
          type: "string"
          in: "formData"
        - name: "addressStreetLine1"
          in: "formData"
          type: "string"
          required: true
        - name: "addressStreetLine2"
          in: "formData"
          type: "string"
        - name: "city"
          in: "formData"
          type: "string"
          required: true
        - name: "zip_code"
          in: "formData"
          type: "string"
          required: true
        - name: "province"
          in: "formData"
          type: "string"
          required: true
        - name: "country"
          in: "formData"
          type: "string"
          required: true
      responses:
        200:
          description: "Successful add"
        403:
          description: "Not authorized!"
        400:
          description: "Some parameters are missing or the given ones have bad syntax"

  /user/update/address:
    put:
      tags:
      - "address"
      - "user"
      summary: "Modify address of the current user"
      description: "Modify address of the current user. \
      \ If no parameters are specified throws a 400 error"
      operationId: "userModifyAddressPUT"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "first_name"
          type: "string"
          in: "formData"
        - name: "last_name"
          type: "string"
          in: "formData"
        - name: "addressStreetLine1"
          in: "formData"
          type: "string"
        - name: "addressStreetLine2"
          in: "formData"
          type: "string"
        - name: "city"
          in: "formData"
          type: "string"
        - name: "zip_code"
          in: "formData"
          type: "string"
        - name: "province"
          in: "formData"
          type: "string"
        - name: "country"
          in: "formData"
          type: "string"
      responses:
        200:
          description: "Successful update!"
        403:
          description: "Not authorized!"
        400:
          description: "Missing parameters or the given ones have bad syntax"

  /user/update/password:
    put:
      tags:
      - "user"
      summary: "Update user's password"
      description: "Put request to modify user's password"
      operationId: "userModifyPasswordPUT"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "old_password"
          in: "formData"
          type: "string"
          format: "password"
          required: true
        - name: "new_password"
          in: "formData"
          type: "string"
          format: "password"
          required: true
        - name: "confirm_new_password"
          in: "formData"
          type: "string"
          format: "password"
          required: true
      responses:
        200:
          description: "Successful operation"
        403:
          description: "You must login to perform this operation"
        401:
          description:
            "Old password is wrong!"
        400:
          description: "Passwords do not coincide!"


  /user/update:
    put:
      tags:
      - "user"
      summary: "Update user's data"
      description: "Put request to modify some of the user's data. \
      \ One can modify single values, so nothing is required. \
      \ If no parameter is set a 400 error is thrown."
      operationId: "userModifyPUT"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "username"
          in: "formData"
          type: "string"
        - name: "email"
          in: "formData"
          type: "string"
        - name: "first_name"
          in: "formData"
          type: "string"
        - name: "surname"
          in: "formData"
          type: "string"
        - name: "birthDate"
          in: "formData"
          type: "string"
          format: "date"
      responses:
        200:
          description: "Successful operation"
        403:
          description: "Unathorized"
        400:
          description: "Missing parameters or the given ones have bad syntax"

  /me:
    get:
      tags:
      - "user"
      summary: "Get current user's data"
      description: "Get current logged in user data"
      operationId: "userGetDetailsGET"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        403:
          description: "Not Authorized!"


  /user/{userId}/reviews:
    get:
      tags:
      - "review"
      - "user"
      summary: "Get reviews from a user"
      description: "Given a user Id, returns all the reviews posted by that user"
      operationId: "userReviewsGET"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user to get the reviews"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        404:
          description: "No reviews found!"
        400:
          description: "Invalid request"

  /cart:
    get:
      tags:
      - "cart"
      summary: "View the content of the cart" 
      operationId: "cartGET"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Cart"
        403:
          description: "Unauthorized"
        400:
          description: "Invalid request!"

  /cart/add/book/{bookId}:
    put:
      tags:
      - "cart"
      summary: "Add/remove items to the cart"
      description: "Adds the given book by id to the cart. Optional quantity, defaults to 1"
      operationId: "cartUpdatePUT"
      parameters:
      - name: "bookId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "quantity"
        in: "query"
        type: "integer"
        description: "Number of copies to add to the cart. Default is 1."
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Book not available in inventory"
        400:
          description: "Bad request"

  /cart/remove/book/{bookId}:
    delete:
      tags:
      - "cart"
      summary: "Remove items from the cart"
      description: "Remove the given book by id to the cart. Optional quantity, defaults to 1"
      operationId: "cartRemoveDELETE"
      parameters:
      - name: "bookId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "quantity"
        in: "query"
        type: "integer"
        description: "Number of copies to remove from the cart. Default is 1"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Book not in the cart"
        400:
          description: "Bad request"

  /cart/setQuantity/book/{bookId}:
    put:
      tags:
      - "cart"
      summary: "Set the quantity of the given book in the cart"
      description: "Set the quantity of a book in the cart. The book must be already in the cart"
      operationId: "cartSetQuantityPUT"
      parameters:
      - name: "bookId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "quantity"
        in: "query"
        type: "integer"
        required: true
        description: "Number of copies of the book in the cart"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Book not in the cart"
        400:
          description: "Bad request"

  /cart/empty:
    delete:
      tags:
      - "cart"
      summary: "Empty the cart"
      description: "Empty the cart completely"
      operationId: "cartEmptyDELETE"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Cart was already empty"
        403:
          description: "You must login to perform this operation"

  /authors:
    get:
      tags:
      - "author"
      summary: "Get the list of authors"
      operationId: "authorsGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        404:
          description: "Author not found!"

  /authors/{authorId}:
    get:
      tags:
      - "author"
      summary: "Get an author by ID"
      operationId: "authorIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Author"
        404:
          description: "Author not found!"

  /publishers:
    get:
      tags:
      - "publisher"
      summary: "Get all publishers"
      operationId: "publishersGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Publisher"
        404:
          description: "Not found!"

  /publishers/{publisherId}:
    get:
      tags:
      - "publisher"
      summary: "Get a publisher by Id"
      operationId: "publisherIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "publisherId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        404:
          description: "Publisher not found!"
          
  /events:
    get:
      tags:
      - "event"
      summary: "Get events filtered"
      operationId: "eventGET"
      produces:
      - "application/json"
      parameters:
      - name: "nameLike"
        in: "query"
        type: "string"
      - name: "dateMin"
        in: "query"
        type: "string"
        format: "date-time"
      - name: "dateMax"
        in: "query"
        type: "string"
        format: "date-time"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operations"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        404:
          description: "No events found!"

  /events/{eventId}:
    get:
      tags:
      - "event"
      summary: "Get an event in which a book is presented"
      operationId: "eventIdGET"
      produces:
      - "application/json"
      parameters:
        - name: "eventId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event not found!"

  /orders:
    get:
      tags:
      - "order"
      summary: "Current user's orders"
      description: "Collection of orders placed by the current user"
      operationId: "ordersGET"
      produces:
      - "application/json"
      parameters:
        - name: "offset"
          in: "query"
          description: "Pagination offset. Default is 0."
          required: false
          type: "integer"
        - name: "limit"
          in: "query"
          description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
          required: false
          type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        403:
          description: "Not authorized!"

  /orders/{orderId}:
    get:
      tags:
      - "order"
      summary: "Get an order by ID"
      description: "Get a specific order by providing ID"
      operationId: "orderByIdGET"
      produces:
      - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Order"
        403:
          description: "Not authorized!"

  /orders/create:
    post:
      tags:
      - "order"
      summary: "Place a new order"
      description: "Place a new order from the cart"
      operationId: "orderPlacePOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "first_name"
          in: "formData"
          type: "string"
        - name: "last_name"
          in: "formData"
          type: "string"
        - name: "addressStreetLine1"
          in: "formData"
          type: "string"
          required: true
        - name: "addressStreetLine2"
          in: "formData"
          type: "string"
        - name: "city"
          in: "formData"
          type: "string"
          required: true
        - name: "zip_code"
          in: "formData"
          type: "string"
          required: true
        - name: "province"
          in: "formData"
          type: "string"
          required: true
        - name: "country"
          in: "formData"
          type: "string"
          required: true
        - name: "shipping_method"
          in: "formData"
          required: true
          type: "string"
          enum: ['Personal Pickup', 'Delivery']
        - name: "payment_method"
          in: "formData"
          required: true
          type: "string"
          enum: ['Credit Card', 'PayPal', 'Bank Transfer', 'Cash on Delivery']          
      responses:
        200:
          description: "Successful placement"
        403:
          description: "Unauthorized"
        400:
          description: "Missing parameters or the given ones have bad syntax"

  /reviews/{reviewId}:
    get:
      tags:
      - "review"
      summary: "Get a review by Id"
      operationId: "reviewIdGET"
      produces:
      - "application/json"
      parameters:
        - name: "reviewId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Review"
        404:
          description: "Review not found!"

  /books/{bookId}/reviews/add:
    post:
      tags:
      - "review"
      - "user"
      - "book"
      summary: "Add a new review"
      description: "Add a new review to the given book"
      operationId: "bookAddReviewPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "bookId"
        in: "path"
        type: "integer"
        format: "int64"
        required: true
      - name: "rating"
        type: "integer"
        in: "formData"
        format: "int32"
        required: true
        minimum: 1
        maximum: 5
      - name: "title"
        in: "formData"
        type: "string"
      - name: "text"
        in: "formData"
        type: "string"
      responses:
        200:
          description: "Successful operation"
        403:
          description: "You must login to perform this operation!"
        400:
          description: "Bad input data"
        409:
          description: "A review from the current user already exists on the given book"

  /themes:
    get:
      tags:
      - "theme"
      summary: "Get the list of themes"
      operationId: "themesGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Theme"
        404:
          description: "No themes found!"

  /genres:
    get:
      tags:
      - "genre"
      summary: "Get the list of genres"
      operationId: "genresGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Genre"
        404:
          description: "No genres found!"
          
definitions:
  User:
    type: "object"
    required:
    - "user_id"
    - "username"
    - "email"
    - "first_name"
    - "surname"
    - "birth_date"
    properties:
      user_id:
        type: "integer"
        format: "int64"
        example: 1
      username:
        type: "string"
        example: "malta895"
      first_name:
        type: "string"
        example: "Mario"
      surname:
        type: "string"
        example: "Rossi"
      email:
        type: "string"
        format: "email"
      birth_date:
        type: "string"
        format: "date"
      address:
        $ref: "#/definitions/Address"
    title: "User"
    description: "A user of the application."

  Cart:
    type: "object"
    required:
    - "user_id"
    - "total_amount"
    - "books"
    properties:
      user_id:
        type: "integer"
        format: "int64"
      total_amount:
        $ref: "#/definitions/Amount"
      books:
        type: "array"
        items:
          type: "object"
          properties:
            book:
              $ref: "#/definitions/Book"
            quantity:
              type: "integer"
              format: "int64"
              description: "How many copies of the book the user has selected"
    title: "Cart"
    description: "Contains books selected by a user, ready to be ordered"

  Book:
    type: "object"
    required:
    - "book_id"
    - "title"
    - "price"
    - "price_currency"
    - "author"
    - "abstract"
    - "publisher"
    properties:
      book_id:
        type: "integer"
        format: "int64"
        example: 1
      isbn:
        type: "string"
        example: "123456679"
      title:
        type: "string"
        example: "Il deserto dei tartari"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/Author"
      price:
        $ref: "#/definitions/Amount"
      picture_path:
        type: "string"
        description: "Relative path to a picture representing the book\n"
        example: "pic1.jpg"
      status:
        type: "string"
        description: "Book availability in the inventory"
        enum:
        - "Available"
        - "Out of stock"
        example: "Available"
      publisher:
        $ref: "#/definitions/Publisher"
      average_rating:
        type: "number"
        format: "double"
        description: "Average rating of the book, calculated from the reviews"
      genre:
        $ref: "#/definitions/Genre"
      theme:
        $ref: "#/definitions/Theme"
    title: "Book"
    description: "A book for sale in the store"

  Amount:
    type: "object"
    required:
    - "currency"
    - "value"
    properties:
      value:
        type: "number"
        format: "double"
        minimum: 0.01
        maximum: 1000000000
      currency:
        $ref: "#/definitions/Currency"
    description: "Price of an item"
    example:
      currency: "EUR"
      value: 11

  Currency:
    type: "string"
    pattern: "^[A-Z]{3,3}$"
    description: "Currency international code\n"
    example: "EUR"

  Author:
    type: "object"
    required:
      - "author_id"
      - "name"
      - "surname"
    properties:
      author_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        description: "First name of the author\n"
        example: "Mario"
      surname:
        type: "string"
        description: "Surname of the author\n"
        example: "Rossi"
      biography:
        type: "string"
        description: "Short biography of the author\n"
      picture:
        type: "string"
        description: "A portrait of the author\n"
    title: "Author"
    description: "An author that has written or co-written some books in the store"

  Address:
    type: "object"
    required:
      - "address_id:"
      - "street_line1"
      - "city"
      - "zip_code"
      - "country"
    properties:
      address_id:
        type: "integer"
        format: "int64"
        example: 1
      first_name:
        type: "string"
        description: "First name on the address"
      last_name:
        type: "string"
        description: "Last name on the address"
      street_line1:
        type: "string"
        example: "Via Valleggio"
      street_line2:
        type: "string"
        example: "11"
      city:
        type: "string"
        example: "Como"
      zip_code:
        type: "string"
        example: "22100"
      province:
        type: "string"
        example: "CO"
      country:
        type: "string"
        example: "Italy"
      latitude:
        type: "number"
        format: "double"
      longitude:
        type: "number"
        format: "double"
    title: "Address"
    description: "A complete address template, usable in many contexts of the web app"

  Event:
    type: "object"
    required:
      - "event_id"
      - "location"
      - "presented_book"
      - "name"
      - "date"
    properties:
      event_id:
        type: "integer"
        format: "int64"
        description: "Unique identifier of the event"
        example: 1
      location:
        $ref: "#/definitions/Address"
      presented_book:
        $ref: "#/definitions/Book"
      name:
        type: "string"
      date:
        type: "string"
        format: "date-time"
    title: "Event"
    description: "An event where some books are presented"

  Publisher:
    type: "object"
    required:
      - "publisher_id"
      - "name"
    properties:
      publisher_id:
        type: "integer"
        format: "int64"
        example: 1
      hq_location:
        $ref: "#/definitions/Address"
      name:
        type: "string"
        description: "Name of the editor/publisher"
        example: "Zanichelli"
      description:
        type: "string"
        description: "Some information on the publisher"
    title: "Publisher"
    description: "Who edits/publishes a book"

  Genre:
    type: "object"
    required:
    - "genre_id"
    - "name"
    properties:
      genre_id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "Horror"
      description:
        type: "string"
        example: "Very scary"
    title: "Genre"
    description: "The genre of the book"

  Theme:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      description:
        type: "string"
    title: "Theme"
    description: "The theme of the book"


  Review:
    type: "object"
    required:
    - "review_id"
    - "user"
    - "rating"
    - "book"
    - "date_published"
    properties:
      review_id:
        type: "integer"
        format: "int64"
      user:
        type: "object"
        properties:
          first_name:
            type: "string"
          surname:
            type: "string"
          username:
            type: "string"
        description: "Data of the user that posted"
      title:
        type: "string"
        description: "Title of the review"
      text:
        type: "string"
        description: "Content of the review"
      rating:
        type: "integer"
        format: "int64"
        minimum: 1
        maximum: 5
        description: "Rating of the review, expressed in 1 to 5 stars"
      book:
        type: "integer"
        format: "int64"
        description: "Id of the reviewed book"
      date_published:
        type: "string"
        format: "date-time"
    title: "Review"
    description: "A review of a book, with rating and optional title and text"

  Order:
    type: "object"
    required:
    - "order_id"
    - "user_id"
    - "items"
    - "total_amount"
    - "shipment_address"
    properties:
      order_id:
        type: "integer"
        format: "int64"
        description: "Id of the order"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Book"
      total_amount:
        $ref: "#/definitions/Amount"
      shipping_method:
        type: "string"
        enum: ['Personal Pickup', 'Delivery']
      payment_method:
        type: "string"
        enum: ['Credit Card', 'PayPal', 'Bank Transfer', 'Cash on Delivery']
      shipment_address:
        $ref: "#/definitions/Address"
      order_date:
        type: "string"
        format: "date-time"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"

schemes:
 - https
 - http
